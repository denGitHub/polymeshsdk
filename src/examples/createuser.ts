/// ///  THIS IS FINAL WORKIN DEMO //////
/// ///  THIS IS FINAL WORKIN DEMO //////
/// ///  THIS IS FINAL WORKIN DEMO //////

import { encodeAddress } from '@polkadot/keyring';
// import confidential_identity from '../../pkg/confidential_identity_wasm_bg.wasm';
import { hexToU8a, stringToU8a,u8aToHex } from '@polkadot/util';
import confidential_identity from '@polymathnetwork/confidential-identity-nodejs';
import { Polymesh } from '@polymathnetwork/polymesh-sdk';
import { ClaimType, ScopeType } from '@polymathnetwork/polymesh-sdk/types';
import BigNumber from 'bignumber.js';
import crypto from 'crypto';
import { sha512 } from 'js-sha512';
import { stringify as uuidStringify,v4 as uuid } from 'uuid';

// import { getClient } from '../Polymesh/index';
import { getClient } from '~/common/client';

import { IPolymeshAccount } from '../interfaces/interfaces';
import { createWallet } from './createwallet';

interface InewUser {
  //   [(true, identity.did, unique_id, cdd_id)];
  success: boolean;
  did: string;
  uuid: string;
  cdd_id: string;
}

(async (): Promise<void> => {
  console.log('NEW USE CREATION');

  const apiAlice: Polymesh = await Polymesh.connect({
    nodeUrl: 'wss://pme.polymath.network',
    accountUri: '//Alice',
  });

  const pii_hash = createDummyPiiHash('Archil', 'Phanchulidze');
  const account: IPolymeshAccount = await createWallet();
  console.log('New Account Address : ', account.address);
  const newAccountPrimaryKey = account.address!;

  console.log(account.mnemonic);

  try {
    // [result, did, uuid, cdd_id] = await new_user(apiAlice, newAccountPrimaryKey, pii_hash);
    const response: InewUser = await new_user(apiAlice, newAccountPrimaryKey, pii_hash);

    if (!response.success) {
      throw new Error('NewUserUnexpectedError');
    }
    console.log('New User: ', response.did, uuid, response.cdd_id);
    await transferPolyX(apiAlice, newAccountPrimaryKey, new BigNumber(1000));

    // NB - this step is not performed by CDD providers - for reference only
    // Write a InvestorUniqueness claim for new user

    const newAccountMnemonic = account.mnemonic!;
    // const newAccountApi = await getClient(newAccountMnemonic);

    const newAccountApi = await Polymesh.connect({
      nodeUrl: 'wss://pme.polymath.network',
      // accountUri: '//Alice',
      accountMnemonic: newAccountMnemonic,
    });

    const scope_did = generateScopeDid('BLACK'); // ACME

    await writeInvestorUniquenessClaim(
      newAccountApi,
      response.did,
      response.uuid,
      scope_did,
      response.cdd_id
    );

    console.log('SUCCESS !!!');
  } catch (err) {
    console.log('Unexpected Error: ', err);
    
  }
})();

async function new_user(
  apiAdmin: Polymesh,
  primary_key: string,
  pii_hash: object
): Promise<InewUser> {
  console.log('****Input Data****');
  console.log(JSON.stringify({ primary_key: primary_key, pii_hash: pii_hash }, null, 2));

  console.log('****Polymesh***** Checking Primary Key is unused');

  const existing_identity = await getIdentityFromAccount(apiAdmin, primary_key);

  if (existing_identity != undefined) {
    throw new Error('PrimaryKeyInUse');
  }
  console.log('Primary Key is unused');

  console.log('****Polymesh***** Creating DID');

  const identity = await createIdentity(apiAdmin, primary_key);
  console.log('DID Created: ', identity.did);

  console.log('****PUIS***** Generating uID');

  const uIDv4: string = createUid(identity.did); // Generated by uuid v4
  // const unique_id: string = `0x${uIDv4.replace(/-/g, '')}`;
  const unique_id: string = uIDv4;
  console.log('unique_id :  ', unique_id);

  console.log('****Confidential Identity Library***** Deriving CDD_ID');

  let cdd_id = confidential_identity.create_cdd_id(
    JSON.stringify({
      investor_did: Array.from(hexToU8a(identity.did)),
      investor_unique_id: Array.from(hexToU8a(unique_id)),
    })
  );

  cdd_id = '0x' + createHexString(JSON.parse(cdd_id));

  console.log('CDD_ID Derived: ', cdd_id);

  console.log('****Polymesh***** Writing CDD Attestation');

  console.log('CDD ATTESTATION OMMITED ... ');

  await writeCddClaim(apiAdmin, identity.did, cdd_id);

  console.log('CDD Attestation Written');

  const newUserResponse: InewUser = {
    success: true,
    did: identity.did,
    uuid: unique_id,
    cdd_id: cdd_id,
  };

  //   let newUserResponse: InewUser = {
  //     success: true,
  //     did: identity.did,
  //     uuid: unique_id,
  //     cdd_id: 'cdd_id',
  //   };
  //   return [true, identity.did, unique_id, cdd_id];
  return newUserResponse;
}

/**
 * Transfers poly x
 * @param api
 * @param to
 * @param amount
 */
async function transferPolyX(api: Polymesh, to: string, amount: BigNumber) {
  const transactionQ = await api.transferPolyx({
    to: to,
    amount: amount,
  });
  await transactionQ.run();
}

/**
 * Creates identity
 * @param api
 * @param target_account
 * @returns
 */
async function createIdentity(api: Polymesh, target_account: string) {
  const transactionQ = await api.registerIdentity({
    targetAccount: target_account,
  });
  const identity = await transactionQ.run();
  return identity;
}

/**
 * Gets identity from account
 * @param api
 * @param target_account
 * @returns
 */
async function getIdentityFromAccount(api: Polymesh, target_account: string) {
  const account = await api.getAccount({
    address: target_account,
  });
  const identity = await account.getIdentity();
  return identity;
}

/**
 * Writes cdd claim
 * @param api
 * @param did
 * @param cdd_id
 */
async function writeCddClaim(api: Polymesh, did: string, cdd_id: string) {
  const claims = api.claims;
  const transactionQ = await claims.addClaims({
    claims: [
      {
        target: did,
        claim: {
          type: ClaimType.CustomerDueDiligence,
          id: cdd_id,
        },
      },
    ],
  });
  await transactionQ.run();
}

/**
 * Creates dummy pii hash
 * @param firstName
 * @param lastName
 * @returns
 */
function createDummyPiiHash(firstName: string, lastName: string) {
  return [
    {
      check_name: 'BaseIndividual',
      pii_payloads: [
        {
          payload_name: 'FirstName',
          payload_value: sha512(
            Math.random()
              .toString(36)
              .substring(7)
          ),
        },
        {
          payload_name: 'LastName',
          payload_value: sha512(
            Math.random()
              .toString(36)
              .substring(7)
          ),
        },
        {
          payload_name: 'BirthDate',
          payload_value: sha512(
            Math.random()
              .toString(36)
              .substring(7)
          ),
        },
        {
          payload_name: 'CountryAlpha2',
          payload_value: 'AU',
        },
      ],
    },
  ];
}

/**
 * Creates uid
 * @param did
 * @returns uid
 */
function createUid(did: string | undefined): string {
  let mockUId = '';
  if (did) {
    const mockUIdHex = `0x${confidential_identity.create_mocked_investor_uid(did)}`;
    // mockUId =  uuidStringify(hexToU8a(mockUIdHex));
    console.log('mockUid : ', mockUId);
    mockUId = mockUIdHex;
  }
  return mockUId;
}

/**
 * Creates hex string
 * @param arr
 * @returns
 */
function createHexString(arr: number[]) {
  console.log('Arr Length : ', arr.length);
  let result = '';
  for (let i = 0; i < arr.length; i++) {
    let str = arr[i].toString(16);
    str =
      str.length == 0
        ? '00'
        : str.length == 1
        ? '0' + str
        : str.length == 2
        ? str
        : str.substring(str.length - 2, str.length);
    result += str;
  }
  return result;
}

/**
 * Writes investor uniqueness claim
 * @param api // User Account API not and // Alice
 * @param did
 * @param unique_id
 * @param scope_did
 * @param cdd_id
 */
async function writeInvestorUniquenessClaim(
  api: Polymesh,
  did: string,
  unique_id: string,
  scope_did: string,
  cdd_id: string
) {
  console.log('****Confidential Identity Library***** Generating InvestorUniquenessProof');

  const seed = JSON.stringify(crypto.randomBytes(32).toJSON().data);
  console.log('Seeed : ', seed);
  const iu_proof = confidential_identity.create_scope_claim_proof(
    JSON.stringify({
      investor_did: Array.from(hexToU8a(did)),
      investor_unique_id: Array.from(hexToU8a(unique_id)),
    }),
    JSON.stringify({
      scope_did: Array.from(hexToU8a(scope_did)),
      investor_unique_id: Array.from(hexToU8a(unique_id)),
    }),
    seed
  );

  console.log('---------------------------------');
  console.log(JSON.parse(iu_proof));
  console.log('---------------------------------');

  const proof = '0x' + createHexString(JSON.parse(iu_proof).proof_scope_id_wellformed);
  const scope_id = '0x' + createHexString(JSON.parse(iu_proof).scope_id);
  console.log('scope_id  ', scope_id);

  console.log('****Polymesh***** Writing InvestorUniqueness Claim');
  const claims = api.claims;
  const transactionQ = await claims.addInvestorUniquenessClaim({
    cddId: cdd_id,
    proof: proof,
    scope: { type: ScopeType.Ticker, value: scope_did },
    scopeId: scope_id,
  });
  await transactionQ.run();
}

/**
 * Generates scope did
 * @param scopeName // BLACK or ACME etc ...
 * @returns scope did
 */
function generateScopeDid(scopeName: string): string {
  const blackhex = Array.prototype.map
    .call(scopeName, (_, index: number, whole: any) => {
      return whole.charCodeAt(index).toString(16);
    })
    .join('')
    .padEnd(24, '0');

  const scopeDid = `0x${blackhex}`;
  return scopeDid;
}
